NAME
    Email::Stuff - Email stuff to people and things... and, like, stuff

SYNOPSIS
      # Prepare the message
      my $body = <<'AMBUSH_READY';
      Dear Santa
  
      I have killed Bun Bun.
  
      Yes, I know what you are thinking... but it was actually a total accident.
  
      I was in a crowded line at a BayWatch signing, and I tripped, and stood on his head.
  
      Yeah, I know. Oops!
  
      So, I am willing to sell you the body for $1 million dollars.
  
      Be near the pinhole to the Dimension of Pain at midnight.
  
      Alias
  
      AMBUSH_READY
  
      # Create and Send the Email
      Email::Stuff->From     ('cpan@ali.as'                      )
                  ->To       ('santa@northpole.org'              )
                  ->BCC      ('bunbun@sluggy.com'                )
                  ->text_body($body                              )
                  ->attach   (io('dead_bunbun_faked.gif')->all,
                              filename => 'dead_bunbun_proof.gif')
                  ->send;

DESCRIPTION
    The basics should all work, but this module is still subject to name
    and/or API changes

    Email::Stuff, as its name suggests, is a fairly casual module used to
    email "stuff" to people using the most common methods. It is a fairly
    high-level module designed for ease of use, but implemented on top of
    the tight and correct Email:: modules.

    Email::Stuff is typically used to build emails and send them in a single
    statement, as seen in the synopsis. And it is certain only for use when
    creating and sending emails. As such, it contains no parsing support,
    and little modification support. To re-iterate, this is very much a
    module for those "slap it together and send it off" situations, but that
    still has enough grunt behind the scenes to do things properly.

  Default Mailer
    Although it cannot be relied upon to work, the default behaviour is to
    use sendmail to send mail, if you don't provide the mail send channel
    with either the "using" method, or as an argument to "send".

    The use of sendmail as the default mailer is consistent with the
    behaviour of the Email::Send module.

METHODS
    As you can see from the synopsis, all methods that modify the
    Email::Stuff object returns the object, and thus most normal calls are
    chainable.

    However, please note that "send", and the group of methods that do not
    change the Email::Stuff object do not return the object, and thus are
    not chainable.

  new
    Creates a new, empty, Email::Stuff object.

  headers
    Returns, as a list, all of the headers currently set for the Email

  parts
    Returns, as a list, the Email::MIME parts for the Email

  header $header => $value
    Adds a single named header to the email. Note I said add not set, so you
    can just keep shoving the headers on. But of course, if you want to use
    to overwrite a header, you're stuffed. Because this module is not for
    changing emails, just throwing stuff together and sending it.

  To $address
    Adds a To header to the email

  From $address
    Adds (yes ADDS, you only do it once) a From header to the email

  CC $address
    Adds a CC header to the email

  BCC $address
    Adds a BCC header to the email

  Subject $text
    Adds a subject to the email

  text_body $body [, $header => $value, ... ]
    Sets the text body of the email. Unless specified, all the appropriate
    headers are set for you. You may overload any as needed. See
    Email::MIME::Creator for the actual headers to use.

  html_body $body [, $header => $value, ... ]
    Set the HTML body of the email. Unless specified, all the appropriate
    headers are set for you. You may overload any as needed. See
    Email::MIME::Creator for the actual headers to use.

  attach $contents [, $header => $value, ... ]
    Adds an attachment to the email. The first argument is the file contents
    followed by (as for text_body and html_body) the list of headers to use.
    Email::Stuff should TRY to guess the headers right, but you may wish to
    provide them anyway to be sure. Encoding is Base64 by default.

  attach_file $file
    Provides a one-argument method to attach a file that already exists on
    the filesystem to the email. "attach_file" will auto-detect the MIME
    type, and use the file's current name when attaching.

  using $Driver, @options
    The "using" method specifies the Email::Send driver that you want to use
    to send the email, and any options that need to be passed to the driver
    at the time that we send the mail.

  Email
    Creates and returns the full Email::MIME object for the email.

    Email::Stuff also support Param::Coerce coercion to Email::Mime using
    this method.

  as_string
    Returns the string form of the email. Identical to (and uses behind the
    scenes) Email::MIME->as_string.

  send
    Sends the email via Email::Send.

COOKBOOK
  Custom Alerts
      package SMS::Alert;
  
      sub new {
              shift->SUPER::new(@_)
                   ->From('monitor@my.website')
                   # Of course, we could have pulled these from
                   # $MyConfig->{support_tech} or something similar.
                   ->To('0416181595@sms.gateway')
                   ->using(SMTP => '123.123.123.123');
      }

      package My::Code;
  
      unless ( $Server->restart ) {
              # Notify the admin on call that a server went down and failed
              # to restart.
              SMS::Alert->Subject("Server $Server failed to restart cleanly")
                        ->send;
      }

TO DO
    - Fix a number of bugs still likely to exist

    - Write some proper unit tests. Write ANY unit tests

    - Add any additional small bit of automation that arn't too expensive

SUPPORT
    All bugs should be filed via the CPAN bug tracker at

    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Email%3A%3AStuff>

    For other issues, contact the author

AUTHORS
    Adam Kennedy (Maintainer), <http://ali.as/>, cpan@ali.as

COPYRIGHT
    Copyright (c) 2004 Adam Kennedy. All rights reserved. This program is
    free software; you can redistribute it and/or modify it under the same
    terms as Perl itself.

    The full text of the license can be found in the LICENSE file included
    with this module.

